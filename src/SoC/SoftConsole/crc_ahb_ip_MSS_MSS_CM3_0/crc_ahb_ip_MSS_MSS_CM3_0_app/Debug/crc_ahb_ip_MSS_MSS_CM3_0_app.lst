
crc_ahb_ip_MSS_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000740  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  20000740  20000740  00008740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  20000744  20000744  00008744  2**0
                  ALLOC
  3 .stack        00003000  20000748  20000748  00008744  2**0
                  ALLOC
  4 .comment      000000ac  00000000  00000000  00008744  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000087f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002fd  00000000  00000000  00008970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000106d  00000000  00000000  00008c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000433  00000000  00000000  00009cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000103e  00000000  00000000  0000a10d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000484  00000000  00000000  0000b14c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000088c  00000000  00000000  0000b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000768  00000000  00000000  0000be5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 000184f0  00000000  00000000  0000c5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  00024ab4  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000160  00000000  00000000  00024ad9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__main_stack_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	2000032f 	.word	0x2000032f
2000006c:	20000331 	.word	0x20000331
20000070:	20000333 	.word	0x20000333
20000074:	20000335 	.word	0x20000335
20000078:	20000337 	.word	0x20000337
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	2000033d 	.word	0x2000033d
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>

2000032e <UART0_IRQHandler>:
2000032e:	e7fe      	b.n	2000032e <UART0_IRQHandler>

20000330 <UART1_IRQHandler>:
20000330:	e7fe      	b.n	20000330 <UART1_IRQHandler>

20000332 <SPI0_IRQHandler>:
20000332:	e7fe      	b.n	20000332 <SPI0_IRQHandler>

20000334 <SPI1_IRQHandler>:
20000334:	e7fe      	b.n	20000334 <SPI1_IRQHandler>

20000336 <I2C0_IRQHandler>:
20000336:	e7fe      	b.n	20000336 <I2C0_IRQHandler>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>

2000033c <I2C1_IRQHandler>:
2000033c:	e7fe      	b.n	2000033c <I2C1_IRQHandler>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	200006c5 	.word	0x200006c5
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20000740 	.word	0x20000740
20000450:	20000740 	.word	0x20000740
20000454:	20000740 	.word	0x20000740
20000458:	20000744 	.word	0x20000744
2000045c:	00000000 	.word	0x00000000
20000460:	20000744 	.word	0x20000744
20000464:	20000748 	.word	0x20000748
20000468:	200006d1 	.word	0x200006d1
2000046c:	200004a1 	.word	0x200004a1

20000470 <__do_global_dtors_aux>:
20000470:	f240 7344 	movw	r3, #1860	; 0x744
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f240 7040 	movw	r0, #1856	; 0x740
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <main>:
#include "fabric_crc.h"
#include <stdio.h>

int main(void){
200004a0:	b580      	push	{r7, lr}
200004a2:	b084      	sub	sp, #16
200004a4:	af00      	add	r7, sp, #0

	uint32_t crc32_d32, crc32_d8, crc32_d16;

	//Reset CRC IP
	CRC_DeInit();
200004a6:	f000 f841 	bl	2000052c <CRC_DeInit>

	//Configure CRC IP
	CRC_PolynomialSizeSelect(CRC_PolSize_32);
200004aa:	f04f 0000 	mov.w	r0, #0
200004ae:	f000 f879 	bl	200005a4 <CRC_PolynomialSizeSelect>

	//Compute CRC 32, Data 32
	CRC_SetPolynomial(0x04c11db7);
200004b2:	f641 50b7 	movw	r0, #7607	; 0x1db7
200004b6:	f2c0 40c1 	movt	r0, #1217	; 0x4c1
200004ba:	f000 f8b1 	bl	20000620 <CRC_SetPolynomial>
	CRC_SetInitRegister(0x14635287);
200004be:	f245 2087 	movw	r0, #21127	; 0x5287
200004c2:	f2c1 4063 	movt	r0, #5219	; 0x1463
200004c6:	f000 f89b 	bl	20000600 <CRC_SetInitRegister>
	crc32_d32 = CRC_CalcCRC(0xaabbccdd);
200004ca:	f64c 40dd 	movw	r0, #52445	; 0xccdd
200004ce:	f6ca 20bb 	movt	r0, #43707	; 0xaabb
200004d2:	f000 f8b5 	bl	20000640 <CRC_CalcCRC>
200004d6:	4603      	mov	r3, r0
200004d8:	607b      	str	r3, [r7, #4]

	//Compute CRC 32, Data 16
	CRC_ResetDR();
200004da:	f000 f851 	bl	20000580 <CRC_ResetDR>
	CRC_SetPolynomial(0x04c11db7);
200004de:	f641 50b7 	movw	r0, #7607	; 0x1db7
200004e2:	f2c0 40c1 	movt	r0, #1217	; 0x4c1
200004e6:	f000 f89b 	bl	20000620 <CRC_SetPolynomial>
	CRC_SetInitRegister(0x14635287);
200004ea:	f245 2087 	movw	r0, #21127	; 0x5287
200004ee:	f2c1 4063 	movt	r0, #5219	; 0x1463
200004f2:	f000 f885 	bl	20000600 <CRC_SetInitRegister>
	crc32_d16  = CRC_CalcCRC16bits(0x3344);
200004f6:	f243 3044 	movw	r0, #13124	; 0x3344
200004fa:	f000 f8b7 	bl	2000066c <CRC_CalcCRC16bits>
200004fe:	4603      	mov	r3, r0
20000500:	60fb      	str	r3, [r7, #12]

	//Compute CRC 32, Data 8
	CRC_ResetDR();
20000502:	f000 f83d 	bl	20000580 <CRC_ResetDR>
	CRC_SetPolynomial(0x04c11db7);
20000506:	f641 50b7 	movw	r0, #7607	; 0x1db7
2000050a:	f2c0 40c1 	movt	r0, #1217	; 0x4c1
2000050e:	f000 f887 	bl	20000620 <CRC_SetPolynomial>
	CRC_SetInitRegister(0x11223344);
20000512:	f243 3044 	movw	r0, #13124	; 0x3344
20000516:	f2c1 1022 	movt	r0, #4386	; 0x1122
2000051a:	f000 f871 	bl	20000600 <CRC_SetInitRegister>
	crc32_d8  = CRC_CalcCRC8bits(0x28);
2000051e:	f04f 0028 	mov.w	r0, #40	; 0x28
20000522:	f000 f8b9 	bl	20000698 <CRC_CalcCRC8bits>
20000526:	4603      	mov	r3, r0
20000528:	60bb      	str	r3, [r7, #8]

	while(1){};
2000052a:	e7fe      	b.n	2000052a <main+0x8a>

2000052c <CRC_DeInit>:
  * @brief  Deinitializes CRC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void CRC_DeInit(void)
{
2000052c:	b480      	push	{r7}
2000052e:	af00      	add	r7, sp, #0
  /* Set DR register to reset value */
  CRC->DR = 0xFFFFFFFF;
20000530:	f240 0300 	movw	r3, #0
20000534:	f2c4 0305 	movt	r3, #16389	; 0x4005
20000538:	f04f 32ff 	mov.w	r2, #4294967295
2000053c:	601a      	str	r2, [r3, #0]
  /* Set the POL register to the reset value: 0x04C11DB7 */
  CRC->POL = 0x04C11DB7;
2000053e:	f240 0300 	movw	r3, #0
20000542:	f2c4 0305 	movt	r3, #16389	; 0x4005
20000546:	f641 52b7 	movw	r2, #7607	; 0x1db7
2000054a:	f2c0 42c1 	movt	r2, #1217	; 0x4c1
2000054e:	615a      	str	r2, [r3, #20]
  /* Reset IDR register */
  CRC->IDR = 0x00;
20000550:	f240 0300 	movw	r3, #0
20000554:	f2c4 0305 	movt	r3, #16389	; 0x4005
20000558:	f04f 0200 	mov.w	r2, #0
2000055c:	711a      	strb	r2, [r3, #4]
  /* Set INIT register to reset value */
  CRC->INIT = 0xFFFFFFFF;
2000055e:	f240 0300 	movw	r3, #0
20000562:	f2c4 0305 	movt	r3, #16389	; 0x4005
20000566:	f04f 32ff 	mov.w	r2, #4294967295
2000056a:	611a      	str	r2, [r3, #16]
  /* Reset the CRC calculation unit */
  CRC->CR = CRC_CR_RESET;
2000056c:	f240 0300 	movw	r3, #0
20000570:	f2c4 0305 	movt	r3, #16389	; 0x4005
20000574:	f04f 0201 	mov.w	r2, #1
20000578:	609a      	str	r2, [r3, #8]
}
2000057a:	46bd      	mov	sp, r7
2000057c:	bc80      	pop	{r7}
2000057e:	4770      	bx	lr

20000580 <CRC_ResetDR>:
  * @brief  Resets the CRC calculation unit and sets INIT register content in DR register.
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
20000580:	b480      	push	{r7}
20000582:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR |= CRC_CR_RESET;
20000584:	f240 0300 	movw	r3, #0
20000588:	f2c4 0305 	movt	r3, #16389	; 0x4005
2000058c:	f240 0200 	movw	r2, #0
20000590:	f2c4 0205 	movt	r2, #16389	; 0x4005
20000594:	6892      	ldr	r2, [r2, #8]
20000596:	f042 0201 	orr.w	r2, r2, #1
2000059a:	609a      	str	r2, [r3, #8]
}
2000059c:	46bd      	mov	sp, r7
2000059e:	bc80      	pop	{r7}
200005a0:	4770      	bx	lr
200005a2:	bf00      	nop

200005a4 <CRC_PolynomialSizeSelect>:
  *          @arg CRC_PolSize_16: 16-bit polynomial for CRC calculation
  *          @arg CRC_PolSize_32: 32-bit polynomial for CRC calculation
  * @retval None
  */
void CRC_PolynomialSizeSelect(uint32_t CRC_PolSize)
{
200005a4:	b480      	push	{r7}
200005a6:	b085      	sub	sp, #20
200005a8:	af00      	add	r7, sp, #0
200005aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr = 0;
200005ac:	f04f 0300 	mov.w	r3, #0
200005b0:	60fb      	str	r3, [r7, #12]

  /* Check the parameter */
  ASSERT(IS_CRC_POL_SIZE(CRC_PolSize));
200005b2:	687b      	ldr	r3, [r7, #4]
200005b4:	2b18      	cmp	r3, #24
200005b6:	d009      	beq.n	200005cc <CRC_PolynomialSizeSelect+0x28>
200005b8:	687b      	ldr	r3, [r7, #4]
200005ba:	2b10      	cmp	r3, #16
200005bc:	d006      	beq.n	200005cc <CRC_PolynomialSizeSelect+0x28>
200005be:	687b      	ldr	r3, [r7, #4]
200005c0:	2b08      	cmp	r3, #8
200005c2:	d003      	beq.n	200005cc <CRC_PolynomialSizeSelect+0x28>
200005c4:	687b      	ldr	r3, [r7, #4]
200005c6:	2b00      	cmp	r3, #0
200005c8:	d000      	beq.n	200005cc <CRC_PolynomialSizeSelect+0x28>
200005ca:	be00      	bkpt	0x0000

  /* Get CR register value */
  tmpcr = CRC->CR;
200005cc:	f240 0300 	movw	r3, #0
200005d0:	f2c4 0305 	movt	r3, #16389	; 0x4005
200005d4:	689b      	ldr	r3, [r3, #8]
200005d6:	60fb      	str	r3, [r7, #12]

  /* Reset POL_SIZE bits */
  tmpcr &= (uint32_t)~((uint32_t)CRC_CR_POLSIZE);
200005d8:	68fb      	ldr	r3, [r7, #12]
200005da:	f023 0318 	bic.w	r3, r3, #24
200005de:	60fb      	str	r3, [r7, #12]
  /* Set the polynomial size */
  tmpcr |= (uint32_t)CRC_PolSize;
200005e0:	68fa      	ldr	r2, [r7, #12]
200005e2:	687b      	ldr	r3, [r7, #4]
200005e4:	ea42 0303 	orr.w	r3, r2, r3
200005e8:	60fb      	str	r3, [r7, #12]

  /* Write to CR register */
  CRC->CR = (uint32_t)tmpcr;
200005ea:	f240 0300 	movw	r3, #0
200005ee:	f2c4 0305 	movt	r3, #16389	; 0x4005
200005f2:	68fa      	ldr	r2, [r7, #12]
200005f4:	609a      	str	r2, [r3, #8]
}
200005f6:	f107 0714 	add.w	r7, r7, #20
200005fa:	46bd      	mov	sp, r7
200005fc:	bc80      	pop	{r7}
200005fe:	4770      	bx	lr

20000600 <CRC_SetInitRegister>:
  * @note   After resetting CRC calculation unit, CRC_InitValue is stored in DR register
  * @param  CRC_InitValue: Programmable initial CRC value
  * @retval None
  */
void CRC_SetInitRegister(uint32_t CRC_InitValue)
{
20000600:	b480      	push	{r7}
20000602:	b083      	sub	sp, #12
20000604:	af00      	add	r7, sp, #0
20000606:	6078      	str	r0, [r7, #4]
  CRC->INIT = CRC_InitValue;
20000608:	f240 0300 	movw	r3, #0
2000060c:	f2c4 0305 	movt	r3, #16389	; 0x4005
20000610:	687a      	ldr	r2, [r7, #4]
20000612:	611a      	str	r2, [r3, #16]
}
20000614:	f107 070c 	add.w	r7, r7, #12
20000618:	46bd      	mov	sp, r7
2000061a:	bc80      	pop	{r7}
2000061c:	4770      	bx	lr
2000061e:	bf00      	nop

20000620 <CRC_SetPolynomial>:
  * @brief  Initializes the polynomail coefficients.
  * @param  CRC_Pol: Polynomial to be used for CRC calculation.
  * @retval None
  */
void CRC_SetPolynomial(uint32_t CRC_Pol)
{
20000620:	b480      	push	{r7}
20000622:	b083      	sub	sp, #12
20000624:	af00      	add	r7, sp, #0
20000626:	6078      	str	r0, [r7, #4]
  CRC->POL = CRC_Pol;
20000628:	f240 0300 	movw	r3, #0
2000062c:	f2c4 0305 	movt	r3, #16389	; 0x4005
20000630:	687a      	ldr	r2, [r7, #4]
20000632:	615a      	str	r2, [r3, #20]
}
20000634:	f107 070c 	add.w	r7, r7, #12
20000638:	46bd      	mov	sp, r7
2000063a:	bc80      	pop	{r7}
2000063c:	4770      	bx	lr
2000063e:	bf00      	nop

20000640 <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  CRC_Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t CRC_Data)
{
20000640:	b480      	push	{r7}
20000642:	b083      	sub	sp, #12
20000644:	af00      	add	r7, sp, #0
20000646:	6078      	str	r0, [r7, #4]
  CRC->DR = CRC_Data;
20000648:	f240 0300 	movw	r3, #0
2000064c:	f2c4 0305 	movt	r3, #16389	; 0x4005
20000650:	687a      	ldr	r2, [r7, #4]
20000652:	601a      	str	r2, [r3, #0]

  return (CRC->DR);
20000654:	f240 0300 	movw	r3, #0
20000658:	f2c4 0305 	movt	r3, #16389	; 0x4005
2000065c:	681b      	ldr	r3, [r3, #0]
}
2000065e:	4618      	mov	r0, r3
20000660:	f107 070c 	add.w	r7, r7, #12
20000664:	46bd      	mov	sp, r7
20000666:	bc80      	pop	{r7}
20000668:	4770      	bx	lr
2000066a:	bf00      	nop

2000066c <CRC_CalcCRC16bits>:
  * @brief  Computes the 16-bit CRC of a given 16-bit data.
  * @param  CRC_Data: data half-word(16-bit) to compute its CRC
  * @retval 16-bit CRC
  */
uint32_t CRC_CalcCRC16bits(uint16_t CRC_Data)
{
2000066c:	b480      	push	{r7}
2000066e:	b083      	sub	sp, #12
20000670:	af00      	add	r7, sp, #0
20000672:	4603      	mov	r3, r0
20000674:	80fb      	strh	r3, [r7, #6]
  *(uint16_t*)(CRC_BASE) = (uint16_t) CRC_Data;
20000676:	f240 0300 	movw	r3, #0
2000067a:	f2c4 0305 	movt	r3, #16389	; 0x4005
2000067e:	88fa      	ldrh	r2, [r7, #6]
20000680:	801a      	strh	r2, [r3, #0]

  return (CRC->DR);
20000682:	f240 0300 	movw	r3, #0
20000686:	f2c4 0305 	movt	r3, #16389	; 0x4005
2000068a:	681b      	ldr	r3, [r3, #0]
}
2000068c:	4618      	mov	r0, r3
2000068e:	f107 070c 	add.w	r7, r7, #12
20000692:	46bd      	mov	sp, r7
20000694:	bc80      	pop	{r7}
20000696:	4770      	bx	lr

20000698 <CRC_CalcCRC8bits>:
  * @brief  Computes the 8-bit CRC of a given 8-bit data.
  * @param  CRC_Data: 8-bit data to compute its CRC
  * @retval 8-bit CRC
  */
uint32_t CRC_CalcCRC8bits(uint8_t CRC_Data)
{
20000698:	b480      	push	{r7}
2000069a:	b083      	sub	sp, #12
2000069c:	af00      	add	r7, sp, #0
2000069e:	4603      	mov	r3, r0
200006a0:	71fb      	strb	r3, [r7, #7]
  *(uint8_t*)(CRC_BASE) = (uint8_t) CRC_Data;
200006a2:	f240 0300 	movw	r3, #0
200006a6:	f2c4 0305 	movt	r3, #16389	; 0x4005
200006aa:	79fa      	ldrb	r2, [r7, #7]
200006ac:	701a      	strb	r2, [r3, #0]

  return (CRC->DR);
200006ae:	f240 0300 	movw	r3, #0
200006b2:	f2c4 0305 	movt	r3, #16389	; 0x4005
200006b6:	681b      	ldr	r3, [r3, #0]
}
200006b8:	4618      	mov	r0, r3
200006ba:	f107 070c 	add.w	r7, r7, #12
200006be:	46bd      	mov	sp, r7
200006c0:	bc80      	pop	{r7}
200006c2:	4770      	bx	lr

200006c4 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
200006c4:	b480      	push	{r7}
200006c6:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
200006c8:	46bd      	mov	sp, r7
200006ca:	bc80      	pop	{r7}
200006cc:	4770      	bx	lr
200006ce:	bf00      	nop

200006d0 <__libc_init_array>:
200006d0:	b570      	push	{r4, r5, r6, lr}
200006d2:	f240 7638 	movw	r6, #1848	; 0x738
200006d6:	f240 7538 	movw	r5, #1848	; 0x738
200006da:	f2c2 0600 	movt	r6, #8192	; 0x2000
200006de:	f2c2 0500 	movt	r5, #8192	; 0x2000
200006e2:	1b76      	subs	r6, r6, r5
200006e4:	10b6      	asrs	r6, r6, #2
200006e6:	d006      	beq.n	200006f6 <__libc_init_array+0x26>
200006e8:	2400      	movs	r4, #0
200006ea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200006ee:	3401      	adds	r4, #1
200006f0:	4798      	blx	r3
200006f2:	42a6      	cmp	r6, r4
200006f4:	d8f9      	bhi.n	200006ea <__libc_init_array+0x1a>
200006f6:	f240 7538 	movw	r5, #1848	; 0x738
200006fa:	f240 763c 	movw	r6, #1852	; 0x73c
200006fe:	f2c2 0500 	movt	r5, #8192	; 0x2000
20000702:	f2c2 0600 	movt	r6, #8192	; 0x2000
20000706:	1b76      	subs	r6, r6, r5
20000708:	f000 f80a 	bl	20000720 <_init>
2000070c:	10b6      	asrs	r6, r6, #2
2000070e:	d006      	beq.n	2000071e <__libc_init_array+0x4e>
20000710:	2400      	movs	r4, #0
20000712:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20000716:	3401      	adds	r4, #1
20000718:	4798      	blx	r3
2000071a:	42a6      	cmp	r6, r4
2000071c:	d8f9      	bhi.n	20000712 <__libc_init_array+0x42>
2000071e:	bd70      	pop	{r4, r5, r6, pc}

20000720 <_init>:
20000720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20000722:	bf00      	nop
20000724:	bcf8      	pop	{r3, r4, r5, r6, r7}
20000726:	bc08      	pop	{r3}
20000728:	469e      	mov	lr, r3
2000072a:	4770      	bx	lr

2000072c <_fini>:
2000072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000072e:	bf00      	nop
20000730:	bcf8      	pop	{r3, r4, r5, r6, r7}
20000732:	bc08      	pop	{r3}
20000734:	469e      	mov	lr, r3
20000736:	4770      	bx	lr

20000738 <__frame_dummy_init_array_entry>:
20000738:	0485 2000                                   ... 

2000073c <__do_global_dtors_aux_fini_array_entry>:
2000073c:	0471 2000                                   q.. 
